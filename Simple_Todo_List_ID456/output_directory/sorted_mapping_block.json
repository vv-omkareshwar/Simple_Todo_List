{
    "Simple_Todo_List_ID456/src/main/java/com/example/model/Todo.java": [
        {
            "path": "Simple_Todo_List/Simple_Todo_List_ID123/src/main/java/com/example/model/Todo.java",
            "content": "package com.example.model;\n\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.validation.constraints.NotBlank;\nimport javax.validation.constraints.Size;\n\n@Entity\n@ApiModel(description = \"Todo item representation\")\npublic class Todo {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @ApiModelProperty(notes = \"The unique identifier of the todo item\")\n    private Long id;\n\n    @NotBlank(message = \"Task description cannot be blank\")\n    @Size(max = 255, message = \"Task description cannot exceed 255 characters\")\n    @ApiModelProperty(notes = \"The description of the todo item\", required = true)\n    private String description;\n\n    @ApiModelProperty(notes = \"The completion status of the todo item\")\n    private boolean completed;\n\n    // Default constructor\n    public Todo() {}\n\n    // Constructor with description\n    public Todo(String description) {\n        this.description = description;\n        this.completed = false;\n    }\n\n    // Getters and setters\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    public boolean isCompleted() {\n        return completed;\n    }\n\n    public void setCompleted(boolean completed) {\n        this.completed = completed;\n    }\n\n    @Override\n    public String toString() {\n        return \"Todo{\" +\n                \"id=\" + id +\n                \", description='\" + description + '\\'' +\n                \", completed=\" + completed +\n                '}';\n    }\n}"
        }
    ],
    "Simple_Todo_List_ID456/src/main/java/com/example/service/TodoService.java": [
        {
            "path": "Simple_Todo_List/Simple_Todo_List_ID123/src/main/java/com/example/service/TodoService.java",
            "content": "package com.example.service;\n\nimport com.example.model.Todo;\nimport org.springframework.stereotype.Service;\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\n@Api(tags = \"Todo Service\", description = \"Operations pertaining to todos in the application\")\npublic class TodoService {\n    private List<Todo> todos = new ArrayList<>();\n    private long nextId = 1;\n\n    @ApiOperation(value = \"Get all todos\", notes = \"Retrieves a list of all todos\")\n    public List<Todo> getAllTodos() {\n        return new ArrayList<>(todos);\n    }\n\n    @ApiOperation(value = \"Get a todo by ID\", notes = \"Retrieves a todo based on its ID\")\n    public Optional<Todo> getTodoById(long id) {\n        return todos.stream().filter(todo -> todo.getId() == id).findFirst();\n    }\n\n    @ApiOperation(value = \"Add a new todo\", notes = \"Creates a new todo and adds it to the list\")\n    public Todo addTodo(String text) {\n        Todo newTodo = new Todo(nextId++, text, false);\n        todos.add(newTodo);\n        return newTodo;\n    }\n\n    @ApiOperation(value = \"Update a todo\", notes = \"Updates an existing todo's text and completion status\")\n    public Optional<Todo> updateTodo(long id, String text, boolean completed) {\n        Optional<Todo> todoOptional = getTodoById(id);\n        if (todoOptional.isPresent()) {\n            Todo todo = todoOptional.get();\n            todo.setText(text);\n            todo.setCompleted(completed);\n            return Optional.of(todo);\n        }\n        return Optional.empty();\n    }\n\n    @ApiOperation(value = \"Delete a todo\", notes = \"Removes a todo from the list based on its ID\")\n    public boolean deleteTodo(long id) {\n        return todos.removeIf(todo -> todo.getId() == id);\n    }\n}",
            "dependent_files": [
                {
                    "path": "Simple_Todo_List/Simple_Todo_List_ID123/src/main/java/com/example/model/Todo.java",
                    "content": "package com.example.model;\n\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.validation.constraints.NotBlank;\nimport javax.validation.constraints.Size;\n\n@Entity\n@ApiModel(description = \"Todo item representation\")\npublic class Todo {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @ApiModelProperty(notes = \"The unique identifier of the todo item\")\n    private Long id;\n\n    @NotBlank(message = \"Task description cannot be blank\")\n    @Size(max = 255, message = \"Task description cannot exceed 255 characters\")\n    @ApiModelProperty(notes = \"The description of the todo item\", required = true)\n    private String description;\n\n    @ApiModelProperty(notes = \"The completion status of the todo item\")\n    private boolean completed;\n\n    // Default constructor\n    public Todo() {}\n\n    // Constructor with description\n    public Todo(String description) {\n        this.description = description;\n        this.completed = false;\n    }\n\n    // Getters and setters\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    public boolean isCompleted() {\n        return completed;\n    }\n\n    public void setCompleted(boolean completed) {\n        this.completed = completed;\n    }\n\n    @Override\n    public String toString() {\n        return \"Todo{\" +\n                \"id=\" + id +\n                \", description='\" + description + '\\'' +\n                \", completed=\" + completed +\n                '}';\n    }\n}"
                }
            ]
        }
    ],
    "Simple_Todo_List_ID456/src/main/java/com/example/controller/TodoController.java": [
        {
            "path": "Simple_Todo_List/Simple_Todo_List_ID123/src/main/java/com/example/controller/TodoController.java",
            "content": "package com.example.controller;\n\nimport com.example.model.Todo;\nimport com.example.service.TodoService;\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.Parameter;\nimport io.swagger.v3.oas.annotations.responses.ApiResponse;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api/todos\")\n@Tag(name = \"Todo Controller\", description = \"API endpoints for managing todos\")\npublic class TodoController {\n\n    private final TodoService todoService;\n\n    @Autowired\n    public TodoController(TodoService todoService) {\n        this.todoService = todoService;\n    }\n\n    @GetMapping\n    @Operation(summary = \"Get all todos\", description = \"Retrieves a list of all todos\")\n    @ApiResponse(responseCode = \"200\", description = \"Successfully retrieved todos\")\n    public ResponseEntity<List<Todo>> getAllTodos() {\n        List<Todo> todos = todoService.getAllTodos();\n        return ResponseEntity.ok(todos);\n    }\n\n    @PostMapping\n    @Operation(summary = \"Create a new todo\", description = \"Creates a new todo item\")\n    @ApiResponse(responseCode = \"201\", description = \"Todo created successfully\")\n    public ResponseEntity<Todo> createTodo(@RequestBody Todo todo) {\n        Todo createdTodo = todoService.createTodo(todo);\n        return ResponseEntity.status(HttpStatus.CREATED).body(createdTodo);\n    }\n\n    @PutMapping(\"/{id}\")\n    @Operation(summary = \"Update a todo\", description = \"Updates an existing todo item\")\n    @ApiResponse(responseCode = \"200\", description = \"Todo updated successfully\")\n    @ApiResponse(responseCode = \"404\", description = \"Todo not found\")\n    public ResponseEntity<Todo> updateTodo(\n            @Parameter(description = \"ID of the todo to update\") @PathVariable Long id,\n            @RequestBody Todo todo) {\n        Todo updatedTodo = todoService.updateTodo(id, todo);\n        if (updatedTodo != null) {\n            return ResponseEntity.ok(updatedTodo);\n        }\n        return ResponseEntity.notFound().build();\n    }\n\n    @DeleteMapping(\"/{id}\")\n    @Operation(summary = \"Delete a todo\", description = \"Deletes an existing todo item\")\n    @ApiResponse(responseCode = \"204\", description = \"Todo deleted successfully\")\n    @ApiResponse(responseCode = \"404\", description = \"Todo not found\")\n    public ResponseEntity<Void> deleteTodo(\n            @Parameter(description = \"ID of the todo to delete\") @PathVariable Long id) {\n        boolean deleted = todoService.deleteTodo(id);\n        if (deleted) {\n            return ResponseEntity.noContent().build();\n        }\n        return ResponseEntity.notFound().build();\n    }\n}",
            "dependent_files": [
                {
                    "path": "Simple_Todo_List/Simple_Todo_List_ID123/src/main/java/com/example/model/Todo.java",
                    "content": "package com.example.model;\n\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.validation.constraints.NotBlank;\nimport javax.validation.constraints.Size;\n\n@Entity\n@ApiModel(description = \"Todo item representation\")\npublic class Todo {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @ApiModelProperty(notes = \"The unique identifier of the todo item\")\n    private Long id;\n\n    @NotBlank(message = \"Task description cannot be blank\")\n    @Size(max = 255, message = \"Task description cannot exceed 255 characters\")\n    @ApiModelProperty(notes = \"The description of the todo item\", required = true)\n    private String description;\n\n    @ApiModelProperty(notes = \"The completion status of the todo item\")\n    private boolean completed;\n\n    // Default constructor\n    public Todo() {}\n\n    // Constructor with description\n    public Todo(String description) {\n        this.description = description;\n        this.completed = false;\n    }\n\n    // Getters and setters\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    public boolean isCompleted() {\n        return completed;\n    }\n\n    public void setCompleted(boolean completed) {\n        this.completed = completed;\n    }\n\n    @Override\n    public String toString() {\n        return \"Todo{\" +\n                \"id=\" + id +\n                \", description='\" + description + '\\'' +\n                \", completed=\" + completed +\n                '}';\n    }\n}"
                },
                {
                    "path": "Simple_Todo_List/Simple_Todo_List_ID123/src/main/java/com/example/service/TodoService.java",
                    "content": "package com.example.service;\n\nimport com.example.model.Todo;\nimport org.springframework.stereotype.Service;\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\n@Api(tags = \"Todo Service\", description = \"Operations pertaining to todos in the application\")\npublic class TodoService {\n    private List<Todo> todos = new ArrayList<>();\n    private long nextId = 1;\n\n    @ApiOperation(value = \"Get all todos\", notes = \"Retrieves a list of all todos\")\n    public List<Todo> getAllTodos() {\n        return new ArrayList<>(todos);\n    }\n\n    @ApiOperation(value = \"Get a todo by ID\", notes = \"Retrieves a todo based on its ID\")\n    public Optional<Todo> getTodoById(long id) {\n        return todos.stream().filter(todo -> todo.getId() == id).findFirst();\n    }\n\n    @ApiOperation(value = \"Add a new todo\", notes = \"Creates a new todo and adds it to the list\")\n    public Todo addTodo(String text) {\n        Todo newTodo = new Todo(nextId++, text, false);\n        todos.add(newTodo);\n        return newTodo;\n    }\n\n    @ApiOperation(value = \"Update a todo\", notes = \"Updates an existing todo's text and completion status\")\n    public Optional<Todo> updateTodo(long id, String text, boolean completed) {\n        Optional<Todo> todoOptional = getTodoById(id);\n        if (todoOptional.isPresent()) {\n            Todo todo = todoOptional.get();\n            todo.setText(text);\n            todo.setCompleted(completed);\n            return Optional.of(todo);\n        }\n        return Optional.empty();\n    }\n\n    @ApiOperation(value = \"Delete a todo\", notes = \"Removes a todo from the list based on its ID\")\n    public boolean deleteTodo(long id) {\n        return todos.removeIf(todo -> todo.getId() == id);\n    }\n}"
                }
            ]
        }
    ],
    "Simple_Todo_List_ID456/pom.xml": [
        {
            "path": "Simple_Todo_List/Simple_Todo_List_ID123/pom.xml",
            "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.5.0</version>\n        <relativePath/>\n    </parent>\n    <groupId>com.example</groupId>\n    <artifactId>Simple_Todo_List</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>Simple_Todo_List</name>\n    <description>A simple todo list application</description>\n    <properties>\n        <java.version>11</java.version>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-validation</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger2</artifactId>\n            <version>2.9.2</version>\n        </dependency>\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger-ui</artifactId>\n            <version>2.9.2</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springdoc</groupId>\n            <artifactId>springdoc-openapi-ui</artifactId>\n            <version>1.6.9</version>\n        </dependency>\n    </dependencies>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n</project>"
        }
    ],
    "Simple_Todo_List_ID456/src/main/java/com/example/TodoListApplication.java": [
        {
            "path": "Simple_Todo_List/Simple_Todo_List_ID123/src/main/java/com/example/TodoListApplication.java",
            "content": "package com.example;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2;\n\n@SpringBootApplication\n@EnableSwagger2\npublic class TodoListApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(TodoListApplication.class, args);\n    }\n}"
        }
    ],
    "Simple_Todo_List_ID456/src/main/resources/application.properties": [
        {
            "path": "Simple_Todo_List/Simple_Todo_List_ID123/src/main/resources/application.properties",
            "content": "# Server configuration\nserver.port=8080\n\n# Database configuration (using H2 in-memory database for simplicity)\nspring.datasource.url=jdbc:h2:mem:tododb\nspring.datasource.driverClassName=org.h2.Driver\nspring.datasource.username=sa\nspring.datasource.password=password\nspring.jpa.database-platform=org.hibernate.dialect.H2Dialect\n\n# H2 Console configuration (optional, for development purposes)\nspring.h2.console.enabled=true\nspring.h2.console.path=/h2-console\n\n# JPA/Hibernate configuration\nspring.jpa.hibernate.ddl-auto=update\nspring.jpa.show-sql=true\n\n# Logging configuration\nlogging.level.org.springframework=INFO\nlogging.level.com.example=DEBUG\n\n# Swagger configuration\nspringdoc.api-docs.path=/api-docs\nspringdoc.swagger-ui.path=/swagger-ui.html"
        }
    ],
    "Simple_Todo_List_ID456/src/main/resources/static/index.html": [
        {
            "path": "Simple_Todo_List/Simple_Todo_List_ID123/src/main/resources/static/index.html",
            "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Simple Todo List</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Simple Todo List</h1>\n        <div class=\"input-container\">\n            <input type=\"text\" id=\"todoInput\" placeholder=\"Enter a new todo\">\n            <button onclick=\"addTodo()\">Add</button>\n        </div>\n        <ul id=\"todoList\"></ul>\n    </div>\n    <script src=\"script.js\"></script>\n</body>\n</html>"
        }
    ],
    "Simple_Todo_List_ID456/src/main/resources/static/script.js": [
        {
            "path": "Simple_Todo_List/Simple_Todo_List_ID123/src/main/resources/static/script.js",
            "content": "// Function to add a new todo item\nfunction addTodo() {\n    const todoInput = document.getElementById('todoInput');\n    const todoText = todoInput.value.trim();\n    \n    if (todoText !== '') {\n        const todoList = document.getElementById('todoList');\n        const li = document.createElement('li');\n        li.innerHTML = `\n            <span>${todoText}</span>\n            <button onclick=\"removeTodo(this)\">Remove</button>\n        `;\n        todoList.appendChild(li);\n        todoInput.value = '';\n    }\n}\n\n// Function to remove a todo item\nfunction removeTodo(button) {\n    const li = button.parentElement;\n    li.remove();\n}\n\n// Event listener for the add button\ndocument.getElementById('addButton').addEventListener('click', addTodo);\n\n// Event listener for the Enter key in the input field\ndocument.getElementById('todoInput').addEventListener('keypress', function(event) {\n    if (event.key === 'Enter') {\n        addTodo();\n    }\n});"
        }
    ],
    "Simple_Todo_List_ID456/src/main/resources/static/style.css": [
        {
            "path": "Simple_Todo_List/Simple_Todo_List_ID123/src/main/resources/static/style.css",
            "content": "body {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 20px;\n    background-color: #f0f0f0;\n}\n\nh1 {\n    text-align: center;\n    color: #333;\n}\n\n#todo-form {\n    display: flex;\n    margin-bottom: 20px;\n}\n\n#todo-input {\n    flex-grow: 1;\n    padding: 10px;\n    font-size: 16px;\n    border: 1px solid #ddd;\n    border-radius: 4px 0 0 4px;\n}\n\n#add-todo {\n    padding: 10px 20px;\n    font-size: 16px;\n    background-color: #4CAF50;\n    color: white;\n    border: none;\n    border-radius: 0 4px 4px 0;\n    cursor: pointer;\n}\n\n#add-todo:hover {\n    background-color: #45a049;\n}\n\n#todo-list {\n    list-style-type: none;\n    padding: 0;\n}\n\n.todo-item {\n    background-color: white;\n    margin-bottom: 10px;\n    padding: 10px;\n    display: flex;\n    align-items: center;\n    border-radius: 4px;\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n\n.todo-text {\n    flex-grow: 1;\n    margin-right: 10px;\n}\n\n.delete-todo {\n    background-color: #f44336;\n    color: white;\n    border: none;\n    padding: 5px 10px;\n    border-radius: 4px;\n    cursor: pointer;\n}\n\n.delete-todo:hover {\n    background-color: #d32f2f;\n}"
        }
    ]
}